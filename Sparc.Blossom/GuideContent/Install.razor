<div class="guide--wrapper">
    @if (SectionNumber > 1)
    {
        <img @onclick="Back" src="/images/Arrow_left.png" class="arrow"/>
    }
    <div class="guide--content show-section" id="sub-section-1">
        <div class="slide-number">1/6</div>
        <h4>Step 1. Create a Blossom Solution with a Features and Web Project</h4>
        <p>
            <ol>
                <li>
                    Features Project: Create a new .NET 6.0 solution with an ASP.NET Core Empty project (preferably called [YourProject].Features).
                    <aside>
                        Follow the Sparc.Kernel documentation for setup.
                    </aside>
                </li>
                <li>
                    Web Project: Add a Blazor Web Assembly App project to your solution (preferably called [YourProject].Web).
                    <aside>
                        Follow the Sparc.Platforms.Web documentation for setup. 
                    </aside>
                </li>
            </ol>
        </p>
        <h4>Step 1a (optional, if you're targeting mobile/desktop platforms):</h4>
        <h5>Add a Shared UI project and a MAUI Desktop/Mobile project</h5>
        <p>
            <ol>
                <li>
                    Shared UI Project: Add a Razor Class Library project to your solution (preferably called [YourProject].UI).
                    <aside>
                        Follow the Sparc.UI documentation for setup.
                    </aside>
                </li>
                <li>
                    Mobile/Desktop Project: Add a .NET MAUI Blazor App project to your solution (preferably called [YourProject].Maui).
                    <aside>
                        Follow the Sparc.Platforms.Maui documentation for setup.
                    </aside>
                </li>
            </ol>
        </p>
    </div>
    <div class="guide--content" id="sub-section-2">
        <div class="slide-number">2/6</div>
        <h4>Step 2. Write your app</h4>
        <p>
            <ol>
                <li>
                    Create your base entity classes in the Sparc.Features project. 
                    Entities are the core classes that your app uses.
                    <aside>
                        Examples of entities are Order, User, Product, OrderDetail, etc. 
                        See Sparc.Core documentation for architectural guidance.
                    </aside>
                </li>
                <li>
                    Create a Feature for each "feature" that your app needs. Features are operations that your 
                    app can perform and all of the necessary dependencies around that operation (including database 
                    retrieval and persistence and other plugins). Each Feature automatically becomes a separate API endpoint.
                    <aside>
                        Examples of Features are GetOrder, SaveOrder, GetUserProfile, etc. See Sparc.Features 
                        documentation for architectural guidance.
                    </aside>
                </li>
                <li>
                    Create a Blazor Page/Component for each UI Page/Component that your app needs, and place them 
                    in the Sparc.UI project (or Sparc.Platforms.Web for web-only projects).
                    <aside>
                        Examples of Pages are Orders/Index.razor, ProductDetail.razor, Profile.razor, etc. Examples of Components 
                        are ProductSummary.razor, OrdersList.razor, Avatar.razor, etc. See 
                        <a target="_blank" href="https://github.com/sparc-coop/blossom/blob/feature/blossom-docs/Sparc.UI">Sparc.UI</a> documentation for 
                        architectural guidance.
                    </aside>
                </li>
                <li>
                    Call your Features from your UI, using the auto-generated Api class that the framework creates for you.
                    <aside>
                        An Api class is automatically regenerated on each build using the swagger.json file from your Features project, 
                        which is also automatically regenerated on each build. This class is typically called [YourProject]Api, eg. 
                        PointOfSaleApi, and it automatically contains a method for every Feature you've implemented, eg. await 
                        Api.GetOrdersAsync(CustomerId).
                    </aside>
                </li>
                <li>
                    Run the Features project and appropriate Platform project (normally Platforms.Web for fastest development) 
                    locally to test and debug your application.
                </li>
            </ol>
        </p>
    </div>
    <div class="guide--content" id="sub-section-3">
        <div class="slide-number">3/6</div>
        <h4>Step 3. Add Sparc plugins as you need them</h4>
        <h5>Database</h5>
        <p>
            The Sparc.Features library comes with a default in-memory implementation of IRepository, so you likely don't even need 
            to set up a database in the initial stages of development. Just inject IRepository&ltEntity&gt everywhere as needed, and 
            all data will be loaded from/saved to local memory.
            
            When you are ready to add a real database, simply add the appropriate NuGet package to the Sparc.Features project and configure it in the Startup class.

            Sparc currently offers libraries for two database providers:
            <ul>
                <li>
                    Azure Cosmos DB: <a target="_blank" href="https://github.com/sparc-coop/blossom/blob/feature/blossom-docs/Sparc.Database.Cosmos">Sparc.Database.Cosmos </a>
                </li>
                <li>
                    SQL Server / Azure SQL: <a target="_blank" href="https://github.com/sparc-coop/blossom/blob/feature/blossom-docs/Sparc.Database.SqlServer">Sparc.Database.SqlServer</a>
                </li>
            </ul>
            You may also implement your own instance of IRepository&ltT&gt if you desire a custom implementation or need a different database provider.
        </p>
    </div>
    <div class="guide--content" id="sub-section-4">
        <div class="slide-number">4/6</div>
        <h4>Step 3. Add Sparc plugins as you need them</h4>
        <h5>Authentication</h5>
        <p>
            <ul>
                <li>
                    Features Project: Create a new .NET 6.0 solution with an ASP.NET Core Empty project (preferably called [YourProject].Features).
                    <aside>
                        Follow the Sparc.Features documentation for setup. Nuget
                    </aside>
                </li>
                <li>
                    Web Project: Add a Blazor Web Assembly App project to your solution (preferably called [YourProject].Web).
                    <aside>
                        Follow the Sparc.Platforms.Web documentation for setup. 
                    </aside>
                </li>
            </ul>
        </p>
    </div>
    <div class="guide--content" id="sub-section-4">
        <div class="slide-number">5/6</div>
        <h4>Step 3. Add Sparc plugins as you need them</h4>
        <h5>Notifications</h5>
        <p>
            <ul>
                <li>
                    Twilio (for emails and SMS messages): 
                    <a target="_blank" href="https://github.com/sparc-coop/blossom/blob/feature/blossom-docs/Sparc.Notifications.Twilio">Sparc.Notifications.Twilio</a>
                </li>
                <li>
                    Azure Notification Hub (for web and mobile push notifications): 
                    <a target="_blank" href="https://github.com/sparc-coop/blossom/blob/feature/blossom-docs/Sparc.Notifications.Azure">Sparc.Notifications.Azure</a>
                </li>
            </ul>
        </p>
    </div>
    <div class="guide--content" id="sub-section-6">
        <div class="slide-number">6/6</div>
        <h4>Step 4. Deploy your solution</h4>
        <p>
            <ol>
                <li>
                    Deploy the Features project to any .NET 6.0 ASP.NET Core-compatible host (eg. Azure App Services).
                </li>
                <li>
                    Deploy the Web Platform project to any Web Assembly-compatible host (eg. Azure App Services).
                </li>
                <li>
                    Deploy the MAUI Platform project to Google, Apple, and Windows stores, or as desired.
                </li>
            </ol>
        </p>
    </div>
    @if (SectionNumber < 6) {
        <img @onclick="Next" src="/images/Arrow_right.png" class="arrow" />
    }
</div>

@code {
    public int SectionNumber = 1;

    protected async Task Back()
    {
        if (SectionNumber > 1)
        {
            int currentSection = SectionNumber;
            SectionNumber--;
            await JSRuntime.InvokeVoidAsync("backSection", $"sub-section-{currentSection}", $"sub-section-{SectionNumber}");
        }
    }

    protected async Task Next()
    {
        int currentSection = SectionNumber;
        SectionNumber++;
        await JSRuntime.InvokeVoidAsync("nextSection", $"sub-section-{currentSection}", $"sub-section-{SectionNumber}");
    }
}